{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */
    "baseUrl": ".",
    "target": "es6",
    "module": "esnext",
    "jsx": "react",
    "sourceMap": true,
    "strict": true,
    "declaration": false,
    // This CANNOT be "node" or tsc will not be able to resolve the declaration types specified
    // under the `exports` field in the package.json files of dependent packages. A very annoying
    // side-effect of this is that dts-bundle-generator will be unable to produce declaration types
    // for @selectoroid/react-bootstrap and possibly other packages too.
    "moduleResolution": "bundler",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "noImplicitAny": true,
    // For web applications targeting modern web browsers, the lib array should include typings for
    // the DOM and ECMAScript features in use. For React applications, DOM typings are essential for
    // manipulating and accessing the DOM. Targeting modern web browsers facilitates the use of
    // recent ECMAScript features.
    //
    // * "dom" and "dom.iterable" provide typings for web APIs and DOM operations, crucial for
    //   web development and user interactions within a React app. "dom.iterable" enhances support
    //   for iterable collections in the DOM, allowing for more natural iteration patterns.
    //
    // * "esnext" includes the latest ECMAScript features, ensuring access to the most recent
    //   language developments. While "esnext" is recommended for leveraging cutting-edge features,
    //   specific versions like "es2020" can be targeted for more conservative compatibility. Ensure
    //   that your development and production environments support these features, either natively
    //   or through polyfills and bundlers.
    "lib": ["dom", "dom.iterable", "esnext"],
    // Adding @types/react explicitly prevents a bunch of errors such as:
    //   node_modules/@types/mdx/types.d.ts:23:38 - error TS2503: Cannot find namespace 'JSX'.
    //
    //   23 type StringComponent = Extract<keyof JSX.IntrinsicElements, ElementType extends never ? string : ElementType>;
    "types": ["@types/react"],
    "paths": {
      "@selectoroid/model": ["packages/model/src/index.ts"],
      "@selectoroid/react-core": ["packages/react-core/src/index.ts"],
      "@selectoroid/react-bootstrap": ["packages/react-bootstrap/src/index.ts"]
    }
  },
  "exclude": ["./storybook", "**/dist"]
}
